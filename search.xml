<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typescript</title>
      <link href="/2022/12/26/typescript/"/>
      <url>/2022/12/26/typescript/</url>
      
        <content type="html"><![CDATA[<h2 id="The-primitives-string-number-and-boolean"><a href="#The-primitives-string-number-and-boolean" class="headerlink" title="The primitives: string, number, and boolean"></a>The primitives: <code>string</code>, <code>number</code>, and <code>boolean</code></h2><ul><li><code>string</code> represents string values like <code>&quot;hello world&quot;</code></li><li><code>number</code> is for numbers like <code>32</code>,no equivalent to int or flaot - everything is simply <code>number</code>.</li><li><code>boolean</code> is for the two values <code>true</code>,and <code>false</code>.</li></ul><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>To specify the type of an array like <code>[1,2,3]</code> use <code>number[]</code></p><h2 id="Type-Annotations-on-Variables-变量的类型注解"><a href="#Type-Annotations-on-Variables-变量的类型注解" class="headerlink" title="Type Annotations on Variables 变量的类型注解"></a>Type Annotations on Variables 变量的类型注解</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: string = <span class="hljs-string">&quot;Alice&quot;</span>;<br><span class="hljs-comment">// In most cases, though, this isn&#x27;t needed. TS tries to automatically infer the types in your code.</span><br></code></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name: string</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello&quot;</span> + name.<span class="hljs-title function_">toUpperCase</span>() + <span class="hljs-string">&quot;!&quot;</span>);<br>&#125;<br><span class="hljs-comment">// error, paramter need a string.</span><br><span class="hljs-title function_">greet</span>(<span class="hljs-number">34</span>);<br></code></pre></td></tr></table></figure><h3 id="return-type"><a href="#return-type" class="headerlink" title="return type"></a>return type</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getNumber</span>(<span class="hljs-params"></span>): number &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">32</span>;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="Anonymous-Functions匿名函数"><a href="#Anonymous-Functions匿名函数" class="headerlink" title="Anonymous Functions匿名函数"></a>Anonymous Functions匿名函数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Typescript"><span class="hljs-keyword">const</span> names = [<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Eve&quot;</span>];<br><br>names.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>)&#123;<br>  <span class="hljs-comment">// Property &#x27;toUppercase&#x27; does not exits on type &#x27;string&#x27;, Did you mean &#x27;toUpperCase&#x27;.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">toUppercase</span>());<br>&#125;)<br><span class="hljs-comment">// Even though the parameter `s` didn&#x27;t have a type annotation,TypeScript used the types of the `forEach` function </span><br><span class="hljs-comment">// along with the inferred type of the Array, to determine the type `s` will have.</span><br></code></pre></td></tr></table></figure><h2 id="Optional-Properties"><a href="#Optional-Properties" class="headerlink" title="Optional Properties"></a>Optional Properties</h2><h3 id="to-check-Object-is-possible-‘undefined"><a href="#to-check-Object-is-possible-‘undefined" class="headerlink" title="to check Object is possible ‘undefined"></a>to check Object is possible ‘undefined</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">printName</span>(<span class="hljs-params">obj: &#123; first: string, last?: string &#125;</span>) &#123;<br>  <span class="hljs-comment">// Object is possible &#x27;undefined&#x27;</span><br>  <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">last</span> !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">last</span>.<span class="hljs-title function_">toUpperCase</span>());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Type-Aliases"><a href="#Type-Aliases" class="headerlink" title="Type Aliases"></a>Type Aliases</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Point</span> = &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">ID</span> = <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">UserInputSanitizedString</span> = <span class="hljs-built_in">string</span>;<br></code></pre></td></tr></table></figure><h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>An interface declaration is another way to name an object type:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printCoord</span>(<span class="hljs-params">pt: Point</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class="hljs-property">x</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class="hljs-property">y</span>);<br>&#125;<br><br><span class="hljs-title function_">printCoord</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">1999</span> &#125;);<br></code></pre></td></tr></table></figure><h2 id="Literal-Types-字面量类型"><a href="#Literal-Types-字面量类型" class="headerlink" title="Literal Types 字面量类型"></a>Literal Types 字面量类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printText</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span>, alignment: <span class="hljs-string">&quot;left&quot;</span> | <span class="hljs-string">&quot;right&quot;</span> | <span class="hljs-string">&quot;center&quot;</span></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Narrowing"><a href="#Narrowing" class="headerlink" title="Narrowing"></a>Narrowing</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><ul><li>string</li><li>number</li><li>bigint</li><li>boolean</li><li>symbol</li><li>undefined</li><li>object</li><li>function<br>TypeScript knows that only a <code>string</code> value will have a <code>typeof</code> value “string”<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">printId</span>(<span class="hljs-params">id: number | string</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> id === <span class="hljs-string">&#x27;string&#x27;</span>) [<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(is.<span class="hljs-title function_">toUpperCase</span>());<br>  ] <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>if you have a union where all the members have something in common. For example, both arrays and strings </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Return type is inferred as number[] | string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFirstThree</span>(<span class="hljs-params">x: number[] | string</span>) &#123;<br>  <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>&#125;<br><br>fucntion <span class="hljs-title function_">printAll</span>(<span class="hljs-params">strs: string | string[] | <span class="hljs-literal">null</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strs === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    <span class="hljs-comment">// Object is possibly &#x27;null&#x27;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> s <span class="hljs-keyword">of</span> strs) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strs === <span class="hljs-string">&quot;strings&quot;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(strs);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// do nothing</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printAllFix</span>(<span class="hljs-params">strs: string | string[] | <span class="hljs-literal">null</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (strs &amp;&amp; <span class="hljs-keyword">typeof</span> strs === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> s <span class="hljs-keyword">of</span> strs) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strs === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(strs);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// DON&#x27;T DO THIS!!!!!!!!!!!!!!!!!!!!</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printAll</span>(<span class="hljs-params">strs: string | string[] | <span class="hljs-literal">null</span></span>) &#123;<br>  <span class="hljs-comment">// !!!!!!!!!!!!!!!!</span><br>  <span class="hljs-comment">//  DON&#x27;T DO THIS!</span><br>  <span class="hljs-comment">//   KEEP READING</span><br>  <span class="hljs-comment">// !!!!!!!!!!!!!!!!</span><br>  <span class="hljs-keyword">if</span> (strs) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strs === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> s <span class="hljs-keyword">of</span> strs) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strs === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(strs);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="instanceof-narrowing"><a href="#instanceof-narrowing" class="headerlink" title="instanceof narrowing"></a>instanceof narrowing</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">logValue</span>(<span class="hljs-params">x: <span class="hljs-built_in">Date</span> | <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x.<span class="hljs-title function_">toTCString</span>())<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x.<span class="hljs-title function_">toUpperCase</span>())<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Discriminated-unions"><a href="#Discriminated-unions" class="headerlink" title="Discriminated unions"></a>Discriminated unions</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span> &#123;<br>  <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;circle&quot;</span> | <span class="hljs-string">&quot;square&quot;</span>;<br>  radius?: <span class="hljs-built_in">number</span>;<br>  sideLength?: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleShape</span>(<span class="hljs-params">shape: Shape</span>) &#123;<br>  <span class="hljs-comment">// oops!</span><br>  <span class="hljs-keyword">if</span> (shape.<span class="hljs-property">kind</span> === <span class="hljs-string">&quot;rect&quot;</span>) &#123;<br>    <span class="hljs-comment">// This condition will always return &#x27;false&#x27; since the types &#x27;&quot;circle&quot;&#x27; | &#x27;&quot;square&quot;&#x27; and &#x27;&quot;rect&quot;&#x27; have no overlap.</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArea</span>(<span class="hljs-params">shape: Shape</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * shape.<span class="hljs-property">radius</span> ** <span class="hljs-number">2</span>;<br>  <span class="hljs-comment">// Object is possibly &#x27;undefined&#x27;.</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAreaFix</span>(<span class="hljs-params">shape: Shape</span>) &#123;<br>  <span class="hljs-keyword">if</span> (shape.<span class="hljs-property">kind</span> === <span class="hljs-string">&#x27;circle&#x27;</span>) &#123;<br>    <span class="hljs-comment">// we could try to use a non-null assertion (a `!` after `shape.radius`) to say that `radius` is definitely present.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * shape.<span class="hljs-property">radius</span>! ** <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code class="typeScript">interface Circle &#123;  kind: &quot;circle&quot;;  radius: number;&#125;interface Square &#123;  kind: &quot;square&quot;;  sideLength: number;&#125;type Shape = Circle | Square;function getArea(shape: Shape) &#123;  return Math.PI * shape.radius ** 2;  // Property &#39;radius&#39; does not exist on type &#39;Shape&#39;&#125;function getAreaFix(shape: Shape) &#123;  if (shape.kind === &quot;circle&quot;) &#123;    return Math.PI * shape.radius ** 2; // shape: Circle  &#125;&#125;// In this case, kind was that common property. The same checking works with `switch` statements as well. function getAreaSwitch(shape: Shape) &#123;  switch (shape.kind) &#123;    case &quot;circle&quot;:      return Math.PI * shape.radius ** 2;        case &quot;square&quot;:      return shape.sideLength ** 2;  &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-语法、错误、规范</title>
      <link href="/2022/12/20/02-%E8%AF%AD%E6%B3%95%E3%80%81%E9%94%99%E8%AF%AF%E3%80%81%E8%A7%84%E8%8C%83/"/>
      <url>/2022/12/20/02-%E8%AF%AD%E6%B3%95%E3%80%81%E9%94%99%E8%AF%AF%E3%80%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="js中的运算权重。括号运算-gt-普通运算-gt-赋值"><a href="#js中的运算权重。括号运算-gt-普通运算-gt-赋值" class="headerlink" title="js中的运算权重。括号运算 &gt; 普通运算 &gt; 赋值"></a>js中的运算权重。括号运算 &gt; 普通运算 &gt; 赋值</h2><h2 id=""><a href="#" class="headerlink" title="+ - * /"></a>+ - * /</h2><ol><li>加法运算 +, <ol><li>包含数字的数学运算，</li><li><em>字符串拼接，字符串加任何数据类型都转换为字符串</em></li></ol></li><li>除法运算 / <ol><li>c = 0 / 0, c为NaN</li><li>0 / 0 // NaN not a number，</li><li>1 / 0 // infinity</li><li>-1 / 0 // -infinity</li></ol></li><li>取模运算：%</li><li>乘法运算：*</li></ol><p>交换值的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>,<br>    b = <span class="hljs-number">4</span>;<br>a = a + b; <span class="hljs-comment">// 7</span><br>b = a - b; <span class="hljs-comment">// 3</span><br>a = a - b; <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><span id="more"></span>><h2 id="–"><a href="#–" class="headerlink" title="++ –"></a>++ –</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span>,<br>    b;<br>b = --a + a++;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b); <span class="hljs-comment">// 8, 5</span><br></code></pre></td></tr></table></figure><p>运算符在前面加减再运算，在后面相反，先运算，再加减</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p><code>&gt;</code>、<code>&lt;</code> 、<code>&lt;=</code>、<code>&gt;=</code>、<code>==</code>、<code>===</code>、<code>!=</code>、 <code>!==</code></p><p>数字类型的值直接比较，如果是字符串类型，先转换为字符串相对应的ASCII码（字符相对应的十进制代码），多个字符的，从左到右一次对比，直到比较出ASCII码的大小为止</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">number - number<br>number - string   string -&gt; number<br><span class="hljs-keyword">var</span> bool = <span class="hljs-string">&#x27;3&#x27;</span> &gt; <span class="hljs-number">2</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">var</span> bool = <span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// true</span><br><span class="hljs-keyword">var</span> bool = <span class="hljs-string">&#x27;4.5&#x27;</span> &gt; <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">// 字符串转 ASCII码再比较</span><br></code></pre></td></tr></table></figure><ul><li>==不判断数据类型</li><li>===会严格区分数据类型</li><li>!=与==类似，不判断数据类型</li><li>!== 区分数据类型<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3>当if语句要考虑，<strong>互斥性</strong>，如果每一个条件都是互斥的，使用else if</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 当成绩满足了其中一个条件的时候，剩下的判断会直接跳过</span><br><br><span class="hljs-comment">// 同时我们还应该将问题考虑全面，考虑到数据出现问题的情况，将所有出现的可能都进行处理，比如成绩出现问题，大于100，或者为负数的错误情况</span><br><span class="hljs-keyword">var</span> score = <span class="hljs-number">78</span>;<br><span class="hljs-keyword">if</span> (score &lt;= <span class="hljs-number">100</span> &amp;&amp; score &gt;=<span class="hljs-number">90</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你的成绩为A&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;=<span class="hljs-number">70</span> &amp;&amp; score &lt; <span class="hljs-number">90</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你的成绩为B&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">0</span> &amp;&amp; score &lt; <span class="hljs-number">70</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你的成绩为C&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你的成绩计算出现异常！&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Switch-case-语句"><a href="#Switch-case-语句" class="headerlink" title="Switch case 语句"></a>Switch case 语句</h3><p>适合判断一个定值，并且当条件有三个或以上时，更加直观</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> city = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;输入你的城市！&#x27;</span>)<br><br><span class="hljs-keyword">switch</span> (city) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;北京&#x27;</span>:<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;19K&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;广州&#x27;</span>:<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;15K&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;深圳&#x27;</span>:<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;17K&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-attr">default</span>:<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;10K&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><ul><li>SyntaxError语法错误，代码不执行</li><li>ReferenceError，在作用域中找不到变量，报引用错误，前面的代码可以执行</li><li>TypeError,作用域判别成功了，但是对结果的操作是非法或不合理的<h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2>与&amp;&amp; 或|| 非!<br>undefined 、 null 、NaN 、’ ‘ 、0、false是假，其他的都是真，例如1是真，2其实也是真</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span>; <span class="hljs-comment">// 2</span><br>与运算，遇到真就继续往后走，直到遇到假，或者走到最后就返回当前值<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span> || <span class="hljs-literal">null</span> || <span class="hljs-number">1</span> || <span class="hljs-number">0</span>; <span class="hljs-comment">// 1</span><br>或运算，遇到假继续往后走，直到遇到真，或者走到最后就返回当前值<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-发展史、ECMA</title>
      <link href="/2022/12/20/01-%E5%8F%91%E5%B1%95%E5%8F%B2%E3%80%81ECMA/"/>
      <url>/2022/12/20/01-%E5%8F%91%E5%B1%95%E5%8F%B2%E3%80%81ECMA/</url>
      
        <content type="html"><![CDATA[<h2 id="5大浏览器的内核"><a href="#5大浏览器的内核" class="headerlink" title="5大浏览器的内核"></a>5大浏览器的内核</h2><ol><li>IE ——-&gt; <code>trident</code></li><li>Chrome —-&gt; <code>webkit---&gt; blink</code></li><li>Safari ——-&gt; <code>webkit</code></li><li>Firefox ——&gt; <code>gecko</code></li><li>Opera ——-&gt; <code>presto---&gt;webkit---&gt;blink</code></li></ol><h2 id="浏览器的历史与JS的诞生"><a href="#浏览器的历史与JS的诞生" class="headerlink" title="浏览器的历史与JS的诞生"></a>浏览器的历史与JS的诞生</h2><ol><li><strong>1990年</strong><ol><li>蒂姆 伯纳斯 李，通过超文本分享资讯，他开发了一个叫做 world wide web，并且移植到C语言上，更名为libwww/nexus,已经可以实现允许他人浏览他编写的网站，此时可以称作真正的浏览器。</li></ol></li><li><strong>1993年</strong><ol><li>在美国伊利诺大学，NCSA组织的（马克安德森），开发了MOSIAC浏览器，这时已经可以显示图片，成为图形化浏览器</li></ol></li><li><strong>1994年</strong><ol><li>马克安德森与硅图SGI的吉姆克拉克成立了MOSIAC communication corporation，由于商标权，MOSICA的商标权属于伊利诺大学并且转给了 spy glasss公司，所以他们更名为Netscape communication corporation</li><li>也就是后来的网景公司    </li><li>网景公司开发了netscape navigator流行了十年左右，直到2003年</li></ol></li><li><strong>1996年</strong><ol><li>微软公司收购spy glass</li><li>通过MOSIAC开发出IE，internet explorer 1.0</li><li>在同一年发布了IE3，与脚本_JScript_</li><li>网景公司Brendan eich在NETSCAPE NAVIGATOR，开发出来livescript。这个时候js是没有单独的引擎的，脚本的性能非常低</li><li>JAVA火起来了之后，网景公司与java所有方SUN公司合作推广宣传产品，</li><li>livescript更名为—–&gt;javascript</li></ol></li><li><strong>2001年</strong><ol><li>IE6 XP 诞生，JS引擎出现</li></ol></li><li><strong>2003年</strong><ol><li>mozilla公司，开发了firefox -&gt; netscape navigator</li></ol></li><li><strong>2008年</strong><ol><li>google 基于 WEBKIT BLINK GEARS</li><li>开发出chrome浏览器</li><li>v8引擎</li><li>javascript引擎</li><li>v8引擎直接翻译机器码</li><li>独立于浏览器运行</li></ol></li><li><strong>2009年</strong><ol><li>甲骨文oracle收购SUN公司，JS的所有权归于甲骨文</li></ol></li></ol><span id="more"></span><h2 id="ECMA"><a href="#ECMA" class="headerlink" title="ECMA"></a>ECMA</h2><ul><li><code>European Computer Manufactures Association</code>:欧洲计算机制造联合会</li><li>ECMA 评估、开发、认可电信、计算机标准</li><li>ECMA-262—&gt; ECMAScript 脚本语言的规范</li></ul><h2 id="轮转时间片实现单线程的JavaScript模拟多线程"><a href="#轮转时间片实现单线程的JavaScript模拟多线程" class="headerlink" title="轮转时间片实现单线程的JavaScript模拟多线程"></a>轮转时间片实现单线程的JavaScript模拟多线程</h2><p>js通过轮转时间片模拟多线程，即短时间内轮流执行多个任务的片段</p><ol><li><p>执行任务1，任务2</p></li><li><p>切分任务1，任务2</p></li><li><p>随机排列这些任务片段，组成队列</p></li><li><p>按照排列这些队列顺序将任务片段送进JS进程</p></li><li><p>JS线程执行一个又一个的任务片段</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>JS中使用var（variable）声明变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a; <span class="hljs-comment">// 变量声明</span><br>a = <span class="hljs-number">3</span>; <span class="hljs-comment">// 变量赋值</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>; <span class="hljs-comment">// 变量赋值</span><br></code></pre></td></tr></table></figure><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3></li><li><p>不能以数字开头</p></li><li><p>能以字母，_ $ 开头</p></li><li><p>不能使用关键字 保留字</p></li><li><p>命名要有语义化</p><h2 id="jS数据类型"><a href="#jS数据类型" class="headerlink" title="jS数据类型"></a>jS数据类型</h2><p>原始值：<code>Number</code>、<code>String</code> 、<code>Boolean</code>、<code>undefined</code>、<code>null</code></p></li></ol><p>引用类型：<code>object</code>、<code>array</code>、<code>function</code>、<code>date</code>、<code>RegExp</code></p><ol><li><p>原始值存储在栈内存中，当声明一个变量a，赋值为1时，会在栈内存中开辟一块空间命名为a，值保存的是1</p></li><li><p>当给a再次赋值为3时，会重新开辟一块空间a，保存值变为3</p></li><li><p>原本保存1的空间并不会删除，所以js中原始值无法删除</p></li><li><p>引用类型，在栈内存中保存的是一个地址，这个地址是变量值在堆内存中的地址</p></li><li><p>所以当复制一个引用类型时，会在栈内存中复制一份引用类型的地址，两个变量存储的地址都指向的是在堆内存保存的一个值</p></li><li><p>所以这时如果通过其中一个变量修改这个引用类型，那么两个变量的值都会改变,例如</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> b = a;<br>a.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// [1,2,3,4]</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2022/12/19/webpack/"/>
      <url>/2022/12/19/webpack/</url>
      
        <content type="html"><![CDATA[<p>webpack 是一个开源的JavaScritpt模块打包工具,其最核心的功能是解决模块之间的依赖,将各个模块按照特定的规则和顺序组织在一起,这个过程叫做模块打包</p><h2 id="模块打包原理"><a href="#模块打包原理" class="headerlink" title="模块打包原理"></a>模块打包原理</h2><p>一个最简单的Webpack打包结果(bundle)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">const</span> calculator = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./calculator.js&#x27;</span>);<br><span class="hljs-keyword">const</span> sum = calculator.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum&#x27;</span>, sum);<br>   <br><span class="hljs-comment">// calculator.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 立即执行匿名函数</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">modules</span>) &#123;<br>    <span class="hljs-comment">//模块缓存</span><br>    <span class="hljs-keyword">var</span> installedModules = &#123;&#125;;<br>    <span class="hljs-comment">// 实现require</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-params">moduleId</span>) &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-comment">// 执行入口模块的加载</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">__webpack_require__</span>(__webpack_require__.<span class="hljs-property">s</span> = <span class="hljs-number">0</span>);<br>&#125;)(&#123;<br>    <span class="hljs-comment">// modules：以key-value的形式存储所有被打包的模块</span><br>    <span class="hljs-number">0</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>) &#123;<br>        <span class="hljs-comment">// 打包入口</span><br>        <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-string">&quot;3qiv&quot;</span>);<br>    &#125;,<br>    <span class="hljs-string">&quot;3qiv&quot;</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>) &#123;<br>        <span class="hljs-comment">// index.js内容</span><br>    &#125;,<br>    <span class="hljs-attr">jkzz</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span></span>) &#123;<br>        <span class="hljs-comment">// calculator.js 内容</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><span id="more"></span><ol><li>最外层的匿名函数中初始化浏览器执行环境,包括定义<strong>installedModules</strong>对象、__webpack_require__函数等,为模块的加载做一些准备工作</li><li>加载入口模块,每个bundle都有且只有一个入口模块,在上面的例子中,index.js是入口模块,在浏览器中会从它开始执行</li><li>执行模块代码.如果执行到了modle.exports则记录下模块的导出值;如果中间遇到了require函数(准确地说是__webpack_require__),则会暂时交出执行权,进入__webpack_require__函数体内进行加载其他模块的逻辑</li><li>在**<strong>webpack_require</strong><strong>中判断即将加载的模块是否存在于</strong>installedModule**中.如果存在直接取值,否则回到第三步,执行该模块的代码来获取导出值</li><li>所有的依赖都已执行完毕,最后执行权又回到入口模块.当入口代码执行完毕,也就意味着整个bundle运行结束.</li></ol><p>第三步和第四步是一个递归的过程,webpack为每个模块创造来一个可以导出和导入模块的环境,但是本质上并没有修改代码的执行逻辑,因此代码执行的顺序和模块加载的顺序是完全一致的.</p><p>面对工程中成百上千的模块webpack如何将它们有序的组织在一起,了解一些webpack的核心概念</p><ul><li>入口</li><li>输出</li><li>loader</li><li>插件</li><li>模式</li><li>浏览器兼容性</li><li>环境</li></ul><h2 id="entry-入口"><a href="#entry-入口" class="headerlink" title="entry 入口"></a>entry 入口</h2><p>在一切流程的最开始，我们需要指定一个或多个入口（entry），也就是告诉Webpack具体从源码目录下的哪个文件开始打包。如果把工程中各个模块的依赖关系当作一棵树，那么入口就是这棵依赖树的根<br><img src="./webpack/entry.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 构建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
